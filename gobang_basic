#include<iostream>
#include<stdlib.h>
#include<iomanip>
#include"AI.h"
#include"show.h"
#include"Point.h"
using namespace std;

void display()//输出棋盘
{
	for (int i = 0; i < X; i++)
		cout << setw(3) << setfill(' ') << i;
	cout << endl;
	for (int i = 1; i < Y; i++)
	{
		cout << setw(3) << setfill(' ') << i;
		for (int j = 1;j < X;j++)
			cout << setw(3) << setfill(' ') << p[i][j];
		cout << endl;
	}

}

void player()//玩家落子
{
	cout << "请输入落子位置：\n"
		<< "请输入落子的行数：";
	cin >> m;
	cout << "请输入落子的列数：";
	cin >> n;
	if (m <= 0 || m >= X || n >= Y || n <= 0)
	{
		cout << "超出棋盘范围，请重新输入正确坐标！\n";
		player();
	}
	else if ((p[m][n] == '@') || (p[m][n] == 'O'))
	{
		cout << "该点已有棋子，请重新选取落子点！\n";
		player();
	}
	else
		p[m][n] = '@';//黑方用@来表示
	system("cls");
	display();
}

void computer()//电脑落子
{
	isTimeToAI();
	system("cls");
	display();
}

int evalue()//胜利判定
{
	int k = 0, r = 0;
	//斜线判断
	for (k = 3;k < X - 2;k++)
	{
		for (r = 3;r < Y - 2;r++)
		{
			if (p[k][r] != '+'&&p[k - 2][r - 2] == p[k][r] && p[k - 1][r - 1] == p[k][r] && p[k + 1][r + 1] == p[k][r] && p[k + 2][r + 2] == p[k][r])
				return 1;
			else if (p[k][r] != '+'&&p[k + 2][r - 2] == p[k][r] && p[k + 1][r - 1] == p[k][r] && p[k - 1][r + 1] == p[k][r] && p[k - 2][r + 2] == p[k][r])
				return 1;
		}
	}
	//横线判断
	for (k = 1;k < X;k++)
		for (r = 3;r < Y - 2;r++)
			if (p[k][r] != '+'&&p[k][r - 2] == p[k][r] && p[k][r - 1] == p[k][r] && p[k][r + 1] == p[k][r] && p[k][r + 2] == p[k][r])
				return 1;
	//竖线判断
	for (k = 3;k < X - 2;k++)
		for (r = 1;r < Y;r++)
			if (p[k][r] != '+'&&p[k - 2][r] == p[k][r] && p[k - 1][r] == p[k][r] && p[k + 1][r] == p[k][r] && p[k + 2][r] == p[k][r])
				return 1;
	return 0;
}
int main()
{
	system("mode con cols=65 lines=28");//窗口宽度高度
	system("color 70");
	show();
	int vic = 0;
	memset(p, '+', 441);
	display();
	while (1)
	{
		computer();
		if (evalue())
		{
			vic = 1;
			break;
		}
		player();
		if (evalue())
		{
			vic = 2;
			break;
		}
	}
	if (vic == 1)
	{
		system("cls");
		showcomputerwin();
	}
	else if(vic == 2)
	{
		system("cls");
		showplayerwin();
	}
	system("pause");
	return 0;
}
